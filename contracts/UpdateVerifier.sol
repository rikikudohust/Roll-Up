// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

import "./Pairing.sol";

contract UpdateVerifier {
    using Pairing for *;
    struct UpdateVerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }
    struct UpdateProof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }
    function updateVerifyingKey() internal pure returns (UpdateVerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            17872879833064088800364031522114976759367998354597390482218535626575003019347,
            4108788683695824237900372784158472606595897033863420664347417989175895505191
        );

        vk.beta2 = Pairing.G2Point(
            [17507861434625204443736425236983958666793395791261795232273525132960027852928,
             7759993857163781362865167966139402071844678885598127856447008517923938549231],
            [14203973882867711144229735528062298405659416203605236551826283470575618025870,
             21212059901642781771132371509210977521857487420210513953795430303390416313609]
        );
        vk.gamma2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = Pairing.G2Point(
            [116886171449261813470005545856352237422341130003103183414205224354285167583,
             14022631201724940180754464880726470580975174785896642730657014011768197595953],
            [20063199260981097496811527628605337451904286459016121649086506055086663950293,
             12399124550291085428344131621913630563392618595637694945538441223289292675318]
        );
        vk.IC = new Pairing.G1Point[](16);
        
        vk.IC[0] = Pairing.G1Point( 
            21708313709297458597811471103967565946907484597850659305087631306977670895102,
            14852394965211722272595728145772876446701216812373091581485450724752917482645
        );                                      
        
        vk.IC[1] = Pairing.G1Point( 
            7504436297577335899832467275085774028643458138519129309956075646007391522625,
            10169940618032081737884215915397097985892894095766466748803639344479895003675
        );                                      
        
        vk.IC[2] = Pairing.G1Point( 
            1360774085244260049122900898796762622309730463676432975932101665295543379277,
            1578669255347268139098827903242790301412417729141771309325410795167724331143
        );                                      
        
        vk.IC[3] = Pairing.G1Point( 
            8270788700472965115596790636394603461283530695026357995166149548233187089398,
            1496072523668227179235076041762661936245439560758119667294391538347096915421
        );                                      
        
        vk.IC[4] = Pairing.G1Point( 
            25380912330380861133527273414414564675356732346918667449753163768068517957,
            9364416803840035108818714744227557694374990288777627846796084436243647541442
        );                                      
        
        vk.IC[5] = Pairing.G1Point( 
            20543623028296694407399143385491443365815660795945934915379513140800246234227,
            15801784536647980226174869964248657865668268119653043863536088875548859423285
        );                                      
        
        vk.IC[6] = Pairing.G1Point( 
            9670571904777109675206225992537895217762949560203880360797648298774636252900,
            1867740692374312771668952196403947639102246345330844879981471203570585317772
        );                                      
        
        vk.IC[7] = Pairing.G1Point( 
            18483754783380369432872532968641127968263004638993740475555665905006437781802,
            11677303452323020800438094807096112757154988468159507885992559023636766977877
        );                                      
        
        vk.IC[8] = Pairing.G1Point( 
            7784952603754268826517295881759691869045927819332313211347602374573584403197,
            8641426051418020039355654844113183142272645957335629096160378704737483700305
        );                                      
        
        vk.IC[9] = Pairing.G1Point( 
            12074918483379954350636204443322619759194952753358098509884574871196910061841,
            4501112834224368780590078930023980710535267979735972965652240794580821676917
        );                                      
        
        vk.IC[10] = Pairing.G1Point( 
            18270593220230340104413567433211023947695169173442160264066132290058883370944,
            21389199574499260256464819150514046111558890056119623034149511846520767908926
        );                                      
        
        vk.IC[11] = Pairing.G1Point( 
            623917062928441846642061925001431975577729975457281425160648163751406190855,
            21705019049358715274279758256082174348012601898284255510128718805679512241070
        );                                      
        
        vk.IC[12] = Pairing.G1Point( 
            3401678140753185847222719309080289552697005589482637602721648116879861794439,
            4263533762876087888487440328288467748557219198709402381047337018022808805678
        );                                      
        
        vk.IC[13] = Pairing.G1Point( 
            11179901409664759028628792034752937096793002972494222067245217825274207697255,
            19989838454277813736016672545349378329166322649390014761639780521515780597121
        );                                      
        
        vk.IC[14] = Pairing.G1Point( 
            12710033688593170602531522874067032537236214963068105637562364520236920904258,
            20802140406652006511548941435806644520848857525409069855537860629180242481674
        );                                      
        
        vk.IC[15] = Pairing.G1Point( 
            19648483221473421129219093342525404767586887138641195878840842142788445136380,
            18373486134258766005426876037376135202197952926257303807177875290615058010540
        );                                      
        
    }
    function verify(uint[] memory input, UpdateProof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        UpdateVerifyingKey memory vk = updateVerifyingKey();
        require(input.length + 1 == vk.IC.length,"verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }
    /// @return r  bool true if proof is valid
    function verifyUpdateProof(
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[15] memory input
        ) public view returns (bool r) {
        UpdateProof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}